<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Metadata>
        [Event(name="sliderChanged", type="flash.events.Event")]
    </mx:Metadata>
    <mx:Metadata>
        [Event(name="sliderProgress", type="flash.events.Event")]
    </mx:Metadata>
	<mx:Metadata>
        [Event(name="sliderStopped", type="flash.events.Event")]
    </mx:Metadata>
	<mx:Script>
		<![CDATA[
			import models.events.SliderSeekEvent;
			import flash.events.Event;
			import models.utils.Logger;
			
			private var _cursorPosition:Number = 0;
			private var _updateTimerSpan:Number = 100 // milliseconds
			private var _percentagePerSpan:Number = 10;
			private var _timer:Timer;
			private var _playing:Boolean;
			
			public static const REPLAY:String = "Replay";
			public static const REALTIME:String = "Realtime";
			
			public static const LABEL_PLAY:String = "play";
			public static const LABEL_STOP:String = "stop";
			
			public var _total:Number = -1;;
			
			/*
				This MXML dispatches SliderSeekEvent.
			*/
			private function onCreationComplete():void
			{
				setCurrentState("Realtime");
			}
			
			public function get value():Number
			{
				return slider.value;
			}
			
			public function set value(value:Number):void
			{
				slider.value = value;
				dispatchEvent(new Event("sliderChanged"));
			}
			
			public function get time():Number // milliseconds
			{
				/* 
					this can be called after total is set
					by HoneypotViewerAction.startCanvasPlayerWithFile
				*/
				if (_total < 0) {
					Logger.log("total is not initialized / " + Object(this).constructor);
					return 1;
				}
				return _total * slider.value / 100;
			}
			
			public function set total(value:Number):void
			{
				_total = Math.ceil(value);
				totalTime.text = numberPrintf(_total); 
			}
			
			private function numberPrintf(msec:Number):String
			{
				var t:uint = uint(msec / 1000);
				var hour:uint = t / 60;
				var minute:uint = t - hour * 60;
				return timePrintf(hour, minute);
			}
			
			private function timePrintf(hour:uint, minute:uint):String
			{
				var s:String = "";
				if (hour < 10)
					s += "0";
				s += hour;
				s += ":";
				if (minute < 10)
					s += "0";
				s += minute;
				return s;
			}

			public function setMode(mode:String):void
			{
				switch(mode) {
					case REPLAY:
						setCurrentState("Replay");
						break;
					case REALTIME:
						setCurrentState("Realtime");
						break;
					default:
						Logger.log("undefined mode / TerminalView");
				}
			}
			
			public function sliderChanged():void
			{
				if (_timer == null) {
					Logger.log("Invalid slider interaction /" + Object(this).constructor);
					return;
				}
				stopTimer();
				dispatchEvent(new Event("sliderChanged"));
				if (_playing)
					startTimer();
			}
			
			public function stop():void
			{
				dispatchEvent(new Event("sliderStopped"));
			}
			
			
			public function autoProcess(updateTimerSpan:Number, percentagePerSpan:Number):void
			{
				_updateTimerSpan = updateTimerSpan;
				_percentagePerSpan = percentagePerSpan;
				_timer = new Timer(_updateTimerSpan); // call each interval
				_timer.addEventListener(TimerEvent.TIMER, this.updateSlider);
				playButton.enabled = true;
				startTimer();
				_playing = true;
			}
			
			private function stopTimer():void
			{
				_timer.stop();
				playButton.label = LABEL_PLAY;
				dispatchEvent(new Event("sliderStop"));
			}
			
			private function startTimer():void
			{
				_timer.start();
				playButton.label = LABEL_STOP;
				dispatchEvent(new Event("sliderStart"));
			}
			
			public function updateSlider(e:TimerEvent):void
			{
				var newv:Number = slider.value + _percentagePerSpan;
				seek(newv);
				dispatchEvent(new Event("sliderProgress"));
			}
			
			/*
				This class does not have to know the total time of the replay.
			*/
			public function seek(value:Number):void
			{
				if (value < 0 || value > 100) {
					stopTimer();
					return;
				}
				slider.value = value;
				currentTime.text = numberPrintf(_total * value / 100);
			}
			
			private function playToggle():void
			{
				_playing = !_playing;
				if (_playing) {
					startTimer();
				} else {
					stopTimer();
				}
			}

		]]>
	</mx:Script>
		<mx:HBox paddingLeft="150">
			<mx:Button label="stop" id="playButton" click="playToggle();" enabled="false" />
			<mx:HSlider width="800" id="slider" minimum="0" maximum="100"
				value="0" tickColor="black" change="sliderChanged();" />
			<mx:Text text="00:00" id="currentTime" />
			<mx:Text text="/" />
			<mx:Text text="00:00" id="totalTime" />	
		</mx:HBox>
</mx:Canvas>
